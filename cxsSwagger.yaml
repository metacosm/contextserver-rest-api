swagger: '2.0'
info:
  title: CXS REST API
  description: Specification of the CXS Oasis Standard 
  version: "1.0.0"
# the domain of the service
host: cxs.oasisopen.org
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:
  /event/collect/{trackingId}:
    post:
      summary: An endpoint for data collection
      description: |
        Collect single or batched events from any client. This endpoint doesn't require any authentication but requires a valid trackingId. 
      parameters:
        - $ref: '#/parameters/trackingId'
        - name: payload
          description: An array of Event objects
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateEvent'
      tags:
        - Event
      responses:
        204:
          description: No response returned in order to optimize performance
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /event/type:
    get:
      summary: An endpoint returning all available event types
      description: |
        Collect of event types. 
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/orderBy'
      tags:
        - Event
      responses:
        200:
          description: An array of event types
          schema:
           $ref: '#/definitions/EventTypeResult'
          examples: 
            application/json:
              { 
                total: 2000, offset: 0, pageSize: 2,
                hits: [
                  {id: 'pageView', description: 'User has visited a web page', schema: {
                          properties: {
                        		pageTitle: {
                        			type: 'string'
                        		},
                        		tags: {
                        			type: 'string'
                        		}
                        	},
                        	required: []
                        }
                  }
                ]
              }  
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /events:
    get:
      summary: Event retrieval by query
      description: |
        This api enables retrieval of events - if the query object is omitted - all events will be included in the result using default values for pageSize, offset and properties 
      parameters:
        - $ref: '#/parameters/properties'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/offset'
#        - $ref: '#/parameters/orderBy'
        - name: query
          description: Event query definition
          in: body
          schema:
            $ref: '#/definitions/Query'
      tags:
        - Event
        - Query
      responses:
        200:
          description: An array of events
          schema:
           $ref: '#/definitions/EventResult'
          examples: 
            application/json:
              { 
                total: 2000, offset: 0, pageSize: 2,
                orderBy: [{ propertyName: "firstName", order:"DESC" }], 
                hits: [{_id: 1, firstName: 'Novak'}, {_id: 2, firstName: 'Grigor'}]
              }
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /profiles:
    get:
      summary: Profile retrieval by simple query
      description: |
        Access all profiles matching a simple query based
        on matching a single property to a value. The resulsts will automatically be ordered by natural ascending order of the specified property. This endpoint could for example be used to implement
        auto-completion mechanisms
      parameters:
        - $ref: '#/parameters/simpleQueryPropertyName'
        - $ref: '#/parameters/simpleQueryPropertyValue'
        - $ref: '#/parameters/properties'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/reverseOrder'
      tags:
        - Profile
        - Query
      responses:
        200:
          description: An array of profiles
          schema:
           $ref: '#/definitions/ProfileResult'
          examples: 
            application/json:
              { 
                total: 2000, offset: 0, pageSize: 2,
                orderBy: [{ propertyName: "firstName", order:"DESC" }], 
                hits: [{_id: 1, firstName: 'Novak'}, {_id: 2, firstName: 'Grigor'}]
              }
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    post:
      summary: Create a new profile
      description: This method is used to create a new profile with a server-generated ID.
      parameters:
        - $ref: '#/parameters/profileBody'
      tags:
        - Profile
      responses:
        201:
          description: Result of profile creation
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /profiles/queries:
    post:
      summary: Profile retrieval by complex query
      description: |
        Access all profiles matching a complex query
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/queryBody'
      tags:
        - Profile
        - Query
      responses:
        201:
          description: the result of the query creation, with the first page of results if the pageSize parameter was
           specified by the user
          schema:
            $ref: '#/definitions/ProfileResult'
          headers:
            Location:
              description: URL of the newly created query
              type: string
          examples:
            application/json:
              {
                total: 2000, offset: 0, pageSize: 2,
                hits: [{_id: 1, firstName: 'Novak'}, {_id: 2, firstName: 'Grigor'}]
              }
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /profiles/queries/{queryId}:
    get:
      summary: Retrieve the query and the results
      description: This request returns the details of the query as well as the results of the query
      parameters:
        - name: queryId
          in: path
          description: Identifier of the query
          type: string
          required: true
      responses:
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /profiles/{profileId}:
    get:
      summary: Get explicit profile
      description: Access a specific profile.
      parameters:
        - name: profileId
          in: path
          description: Specify the profiles unique ID
          type: string
          required: true
      tags:
        - Profile
      responses:
        200:
          description: A single profile
          schema:
              $ref: '#/definitions/Profile'
          examples:
            application/json:
              { _id: 1, firstName: 'Novak'}
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


################################################################################
#                                   Parameters                                 #
################################################################################
parameters:
  trackingId:
    name: trackingId
    in: path
    description: The unique identifier of the tracker defined in your repository.
    required: true
    type: string
  simpleQueryPropertyName:
    name: propName
    in: query
    description: Name of the property to match a value against (value specified in "propValue" parameter). Implementations might allow for wildcards characters
    required: true
    type: string
  simpleQueryPropertyValue:
    name: propValue
    in: query
    description: Value of the property specified in "propName" to make against. Implementations might allow values to include wildcards or regular expressions
    required: true
    type: string
  properties:
    name: properties
    in: query
    description: Specify the properties to be returned, use * to return all. If not specified, identifier property will be returned (hmm. should we force developers to specify properties?)
    required: false
    type: array
    items:
      type: string
  pageSize:
    name: pageSize
    in: query
    description: Number of items to be returned
    required: false
    type: number
    format: long
  offset:
    name: offset
    in: query
    description: Offset in number of items in query result set
    required: false
    type: number
    format: long
  orderBy:
    name: orderBy
    in: query
    description: Specify property to order query results by
    required: false
    type: string
    format: propertyName ASC | DESC
  queryBody:
    name: query
    in: body
    description: Specifies the query to filter items by
    required: false
    schema:
      $ref: '#/definitions/Query'
  reverseOrder:
    name: reverse
    in: query
    description: If true, the query results will be in reverse order
    required: false
    type: boolean
    format: truthy, any value apart from false or 0 will be true
  profileBody:
    name : profile
    in: body
    description : Represents the contents of a profile in the body of a request
    schema:
      $ref: '#/definitions/Profile'

################################################################################
#                                 Definitions                                  #
################################################################################
definitions:

  QueryClause:
    type: object
    description: A query clause
    allOf:
      - $ref: '#/definitions/Operation'
      - type: object
        properties:
          op:
            type: string
          args:
            type: array
            items:
              $ref: '#/definitions/QueryClause'

  IntLiteral:
    type: integer
    format: int64

  DoubleLiteral:
    type: number
    format: double

  BooleanLiteral:
    type: boolean

  StringLiteral:
    type: string

  DateLiteral:
    type: string
    format: 'date-time'

  OperationArgLiteral:
    type: object
    description: A literal value to be used in QueryClauses
    allOf:
      - $ref: '#/definitions/IntLiteral'
      - $ref: '#/definitions/DoubleLiteral'
      - $ref: '#/definitions/BooleanLiteral'
      - $ref: '#/definitions/StringLiteral'
      - $ref: '#/definitions/DateLiteral'

  OperationArgs:
    type: object
    description: Possible values for Operation args property
    allOf:
      - $ref: '#/definitions/OperationArgLiteral'
      - $ref: '#/definitions/Operation'

  Operation:
    type: object
    properties:
      op:
        type : string
      args:
        type : array
        items :
          $ref: '#/definitions/OperationArgs'


  Query:
    type: object
    description: A container for query projections, operations, arguments and order by clauses
    properties:
      properties:
        type: array
        description : a list of property names to that will be return in the query result.
        items:
          type: string
      op:
        type: string
        description: the function name
      args:
        type : array
        description: arguments for the function, which might include sub operations
        items:
          $ref: '#/definitions/Operation'
      orderBy:
        type: array
        items :
          $ref: '#/definitions/OrderByPart'

# example 1 - short form but non JSON compliant
#       {
#        and:[{
#         geoDistance : [ {
#            geoLocation : 'x',
#            distance : 'y', }]
#           },
#         {
#         in:[1,2,3]
#         }]
#       }

# example 2 - more verbose but more JSON compliant
#      application/json:
#       {
#          properties: [ 'firstName', 'lastName' ]
#          op:'and',
#          args:[
#            {
#              op:'geoDistance',
#              args: [ 'geoLocation', 10 ]
#            },
#            {
#              op: 'in',
#              args:['views', 1,2,3]
#            }
#          ],
#          orderBy : [
#            { propertyName: 'firstName' order: 'DESC'} ,
#            { propertyName: 'lastName' }
#          ]
#      }


  ProfileResult:
    type: object
    allOf:
      - $ref: '#/definitions/QueryResult'
      - type: object
        properties:
          hits:
            type: array
            description: Query result
            items:
              $ref: '#/definitions/Profile'
  
  
  Profile:
    type: object
    properties:
      _id:
        type: string
        format: uuid
    additionalProperties:
      type: object
  
  
            
  EventResult:
    type: object
    allOf:
      - $ref: '#/definitions/QueryResult'
      - type: object
        properties:
          hits:
            type: array
            description: Query result
            items:
              $ref: '#/definitions/Event'          
  
  
  EventTypeResult:
    type: object
    properties:
      total:
        type: number
        format: long
        description: Total number of event types
      offset:
        type: number
        format: long
        description: The requested offset in number of items, starting at 0
      pageSize:
        type: number
        format: short
        description: Requested number of items to be returned
      hits:
        type: array
        description: result
        items:
          $ref: '#/definitions/EventType'
          
  EventType:
    type: object
    properties:
      id:
        type: string
        description: the unique identifier of th event type. Custom event types mist be prefixed with namespace for example mycompany.<eventTypeId>.
      schema:
        type: object
        description: JSON schema for optional event's data. For more info see http://json-schema.org/documentation.html



  CreateEvent:
    type: object
    properties:
# Hmm reuse from event definition?
      eventType: 
        type: string
        description: The type of the current event. Eg. PageView, Click, Hover, Scroll, Bought, MailShot...
      objectId: 
        type: string
        description: The item/object the user interacted with. Eg. Page URL, Product Name, Mail shot Id...
      subjectId:
        type: string
        description: Source unique id identifying the web page visitor or contact in the CRM system. The id can be optained from cookie or directly from the source system. The used tracking id should be bound to a specific source. If a unique id cannot be generated, the context server can issue one for you.
      geoLocation:
        type: string
        format: geoPoint
        description: TBD
      timestamp:
        type: string
        format: date-time
        description: If not specified, the context server uses time of submission.
      data:
        type: object
        description: Optional event specific information.
    required: ['eventType', 'objectId', 'subjectId']
  
  Event:
    type: object
    properties:
      _id:
        type: string
      eventType: 
        type: string
        description: the type of the current event
        # should we name it object, item or other instead?
      objectId: 
        type: string
        description: The item/object the user interacted with
        # Should the Profile Id be available also as a cookie?
      subjectId:
        type: string
      geoLocation:
        type: string
        format: geoPoint
        description: TBD
      timestamp:
        type: string
        format: date-time
        description: If not specified, the context server uses time of submission.
      data:
        type: object
        description: Optional event specific information.
    required: ['eventType', 'objectId', 'subjectId']

      
  QueryResult:
    type: object
    discriminator: resultType
    required:
      - resultType # required for inheritance to work
    properties:
      resultType:
        type: string
      total:
        type: number
        format: long
        description: Total number of objects matching this query
      offset:
        type: number
        format: long
        description: The requested offset in number of items, starting at 0
      pageSize:
        type: number
        format: short
        description: Requested number of items to be returned
      orderBy:
        type: array
        items:
          $ref: '#/definitions/OrderByPart'
      hits:
        type: array
        description: Query result
        items:
          type: object  


  OrderByPart:
    type: object
    description: A single part of a orderBy clause
    properties: 
      propertyName:
        type: string
        description : This parameter is required
      order: 
        type: string
        format: DESC
        description : This parameter is optional, if not specified it will default to ASC

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
