# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: CXS REST API
  description: Specification of the CXS Oasis Standard 
  version: "1.0.0"
# the domain of the service
host: cxs.oasisopen.org
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:
  /event/collect/{trackingId}:
    post:
      summary: An endpoint for data collection
      description: |
        Collect single or batched events from any client. This endpoint doesn't require any authentication but requires a valid trackingId. 
      parameters:
        - $ref: '#/parameters/trackingId'
        - name: payload
          description: An array of Event objects
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateEvent'
      tags:
        - Events
      responses:
        204:
          description: No response returned in order to optimize performance
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /event/type:
    get:
      summary: An endpoint returning all available event types
      description: |
        Collect of event types. 
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/orderBy'
      tags:
        - Events
      responses:
        200:
          description: An array of event types
          schema:
           $ref: '#/definitions/EventTypeResult'
          examples: 
            application/json:
              { 
                total: 2000, offset: 0, pageSize: 2,
                hits: [
                  {id: 'pageView', description: 'User has visited a web page', schema: {
                          properties: {
                        		pageTitle: {
                        			type: 'string'
                        		},
                        		tags: {
                        			type: 'string'
                        		}
                        	},
                        	required: []
                        }
                  }
                ]
              }  
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /profile:
    get:
      summary: Profiles
      description: |
        Access all profiles.
      parameters:
        - $ref: '#/parameters/query'
        - $ref: '#/parameters/properties'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/orderBy'
      tags:
        - Profile
      responses:
        200:
          description: An array of profiles
          schema:
           $ref: '#/definitions/ProfileResult'
          examples: 
            application/json:
              { 
                total: 2000, offset: 0, pageSize: 2,
                hits: [{_id: 1, firstName: 'Novak'}, {_id: 2, firstName: 'Grigor'}]
              }
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /profile/{profileId}:
    get:
      summary: Get explicit profile
      description: Access a specific profile.
      parameters: 
        - name: profileId
          in: path
          description: Specify the profiles unique ID
          type: string
          required: true
      tags:  
        - Profile
      responses:
        200:
          description: A single profile
          schema:
              $ref: '#/definitions/Profile'
          examples: 
            application/json:
              { _id: 1, firstName: 'Novak'}
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
     
#
# TODO : Decide whether we should keep this endpoint because if it doesn't 
# specify a query language its usefulness is questionable.
#
  /query:
    post:
      summary: Perform a query
      description: Execute a query against specified objects in the Context Server
      parameters:
        - name: queryString
          in: body
          description: an query expressed in a implementation specific query language. An SQL-like example could look like this "SELECT profileId as _id,firstName,e.purchaseDate as date FROM profiles AS p,events AS e WHERE p.profileId=e.profileId and e.purchaseDate > today - 30 days" 
          schema:
            type: string
          required: true
      tags:
        - Query
      responses:
        200:
          description: A query result
          schema:
            $ref: '#/definitions/QueryResult'
          examples:
            application/json:
              { 
                total: 2000, offset: 0, pageSize: 2,
                hits: [{_id: 1, firstName: 'Serge', date:'2016-05-03T14:30:20'}, {_id: 2, firstName: 'Jan', date:'2016-05-03T13:43:55'}]
              }
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

################################################################################
#                                   Parameters                                 #
################################################################################
parameters:
  trackingId:
    name: trackingId
    in: path
    description: The unique identifier of the tracker defined in your repository.
    required: true
    type: string
  query:  
    name: query
    in: query
    description: | 
      Valid object-specific query string. The elements of the query are boolean returning functions that may be combined using AND,OR,NOT operators as well as parentheses to group and clarify operator precedence. Functions may take multiple parameter and context server implementations must implement a minimal standardized set of functions defined here, but may also provide additional functions that are not specified in this document. 
      A complex example would look like this
      greaterThan('age',30) AND lowerThan('age',50) AND closeTo('town', 'geneva')
      Here below are the required built-in function that implementations must provide
      equals(propertyName,value) / eq / =
      greaterThan(propertyName,value) / gt / > 
      greaterOrEqual(propertyName,value) / gte / >=
      lessThan(propertyName,value) / lt
      lessOrEqual(propertyName,value) / lte
      TO BE COMPLETED
    required: false
    type: string
    format: conditionExpression
  properties: 
    name: properties
    in: query
    description: Specify the properties to be returned, use * to return all. If not specified profile ids will be returned
    required: false
    type: array
    items: 
      type: string
  pageSize:
    name: pageSize
    in: query
    description: Number of items to be returned
    required: false
    type: number
    format: long
  offset:
    name: offset
    in: query
    description: Offset in number of items in query result set
    required: false
    type: number
    format: long 
  orderBy:
    name: orderBy
    in: query
    description: Specify property to order by
    required: false
    type: string
    format: propertyname ASC|DESC
    
################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  ProfileResult:
    type: object
    allOf:
      - $ref: '#/definitions/QueryResult'
      - type: object
        properties:
          hits:
            type: array
            description: Query result
            items:
              $ref: '#/definitions/Profile'
            
  EventTypeResult:
    type: object
    properties:
      total:
        type: number
        format: long
        description: Total number of event types
      offset:
        type: number
        format: long
        description: The requested offset in number of items, starting at 0
      pageSize:
        type: number
        format: short
        description: Requested number of items to be returned
      hits:
        type: array
        description: result
        items:
          $ref: '#/definitions/EventType'
          
  EventType:
    type: object
    properties:
      id:
        type: string
        description: the unique identifier of th event type. Custom event types mist be prefixed with namespace for example mycompany.<eventTypeId>.
      schema:
        type: object
        description: JSON schema for optional event's data. For more info see http://json-schema.org/documentation.html


  Profile:
    type: object
    properties:
      _id:
        type: string
        format: uuid
    additionalProperties:
      type: object

  CreateEvent:
    type: object
    properties:
      eventType: 
        type: string
        description: The type of the current event. Eg. PageView, Click, Hover, Scroll, Bought, MailShot...
      objectId: 
        type: string
        description: The item/object the user interacted with. Eg. Page URL, Product Name, Mail shot Id...
      subjectId:
        type: string
        description: Source unique id identifying the web page visitor or contact in the CRM system. The id can be optained from cookie or directly from the source system. The used tracking id should be bound to a specific source. If a unique id cannot be generated, the context server can issue one for you.
      geoLocation:
        type: string
        format: geoPoint
        description: TBD
      timestamp:
        type: string
        format: date-time
        description: If not specified, the context server uses time of submission.
      data:
        type: object
        description: Optional event specific information.
    required: ['eventType', 'objectId', 'subjectId']
  
#  Event:
#    type: object
#    properties:
#      _id:
#        type: string
#      _eventType: 
#        type: string
#        description: the type of the current event
#        # should we name it object, item or other instead?
#      _target: 
#        type: string
#        description: The item/object the user interacted with
#        # Should the Profile Id be available also as a cookie?
#      _profileId:
#        type: string
#      _timestamp:
#        type: string
#        format: date-time
#    required: ['_eventType', '_target', '_profileId']
      
  QueryResult:
    type: object
    discriminator: resultType
    required:
      - resultType # required for inheritance to work
    properties:
      resultType:
        type: string
      total:
        type: number
        format: long
        description: Total number of objects matching this query
      offset:
        type: number
        format: long
        description: The requested offset in number of items, starting at 0
      pageSize:
        type: number
        format: short
        description: Requested number of items to be returned
      hits:
        type: array
        description: Query result
        items:
          type: object    

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
